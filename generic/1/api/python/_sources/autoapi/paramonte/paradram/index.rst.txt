:mod:`paramonte.paradram`
=========================

.. py:module:: paramonte.paradram


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   paramonte.paradram.ParaDRAM



.. py:class:: ParaDRAM(sampleSize: tp.Optional[int] = None, randomSeed: tp.Optional[int] = None, description: tp.Optional[str] = None, outputFileName: tp.Optional[str] = None, outputDelimiter: tp.Optional[str] = None, chainFileFormat: tp.Optional[str] = None, variableNameList: tp.Optional[tp.List[str]] = None, restartFileFormat: tp.Optional[str] = None, outputColumnWidth: tp.Optional[int] = None, outputRealPrecision: tp.Optional[int] = None, silentModeRequested: tp.Optional[bool] = None, domainLowerLimitVec: tp.Optional[tp.List[float]] = None, domainUpperLimitVec: tp.Optional[tp.List[float]] = None, parallelizationModel: tp.Optional[str] = None, progressReportPeriod: tp.Optional[int] = None, targetAcceptanceRate: tp.Optional[float] = None, mpiFinalizeRequested: tp.Optional[bool] = None, maxNumDomainCheckToWarn: tp.Optional[int] = None, maxNumDomainCheckToStop: tp.Optional[int] = None, chainSize: tp.Optional[int] = None, scaleFactor: tp.Optional[float] = None, startPointVec: tp.Optional[tp.List[float]] = None, proposalModel: tp.Optional[str] = None, proposalStartCovMat: tp.Optional[tp.Union[np.mat, tp.List[tp.List[float]]]] = None, proposalStartCorMat: tp.Optional[tp.Union[np.mat, tp.List[tp.List[float]]]] = None, proposalStartStdVec: tp.Optional[tp.Union[np.mat, tp.List[float]]] = None, sampleRefinementCount: tp.Optional[int] = None, sampleRefinementMethod: tp.Optional[str] = None, randomStartPointRequested: tp.Optional[bool] = None, randomStartPointDomainLowerLimitVec: tp.Optional[tp.List[float]] = None, randomStartPointDomainUpperLimitVec: tp.Optional[tp.List[float]] = None, adaptiveUpdateCount: tp.Optional[int] = None, adaptiveUpdatePeriod: tp.Optional[int] = None, greedyAdaptationCount: tp.Optional[int] = None, delayedRejectionCount: tp.Optional[int] = None, burninAdaptationMeasure: tp.Optional[float] = None, delayedRejectionScaleFactorVec: tp.Optional[tp.Union[np.mat, tp.List[float]]] = None)

   |
   This is the **ParaDRAM** class for generating instances of the **serial** and **parallel**
   **Delayed-Rejection Adaptive Metropolis-Hastings Markov Chain Monte Carlo**
   sampler of the ParaMonte library.

       All ParaDRAM class attributes (input arguments to the ParaDRAM constructor)
       are optional and all attributes can be also set after a ParaDRAM instance
       is returned by the constructor.

       Once you set the optional attributes to your desired values,
       call the ParaDRAM sampler via the object's method ``runSampler()``.

       .. _example-serial-usage:

       **Example serial usage**

       Copy and paste the following code enclosed between the
       two comment lines in your python/ipython/jupyter session
       (make sure the indentations of the pasted lines comply with Python rules):

       .. code-block:: python
           :linenos:

           ##################################
           import paramonte as pm
           import numpy as np
           def getLogFunc(point):
               # return the log of the standard multivariate
               # Normal density function with ndim dimensions
               return -0.5 * np.sum( np.double( point )**2 )
           pmpd = pm.ParaDRAM()
           pmpd.runSampler ( ndim = 4                  # number of dimensions of the objective function
                           , getLogFunc = getLogFunc   # the objective function
                           )
           ##################################

       where,

           ndim
               represents the number of dimensions of the domain of
               the user's objective function ``getLogFunc(point)`` and,

           getLogFunc(point)
               represents the user's objective function to be sampled,
               which must take a single input argument ``point`` of type
               numpy-float64 array of length ``ndim`` and must return the
               natural logarithm of the objective function.

       .. _example-parallel-usage:

       **Example parallel usage**

       Copy and paste the following code enclosed between the
       two comment lines in your python/ipython/jupyter session
       (make sure the indentations of the pasted lines comply with Python rules):

       .. code-block:: python
           :linenos:

           ##################################
           with open("main.py", "w") as file:
               file.write  ('''
           import paramonte as pm
           import numpy as np
           def getLogFunc(point):
               # return the log of the standard multivariate
               # Normal density function with ndim dimensions
               return -0.5 * np.sum( np.double( point )**2 )
           pmpd = pm.ParaDRAM()
           pmpd.mpiEnabled = True
           pmpd.runSampler ( ndim = 4                  # number of dimensions of the objective function
                           , getLogFunc = getLogFunc   # the objective function
                           )
           ''')
           ##################################

       where,

           ndim
               represents the number of dimensions of the domain of
               the user's objective function ``getLogFunc(point)`` and,

           getLogFunc(point)
               represents the user's objective function that is to be sampled.
               This function must take a single input argument ``point`` of type
               numpy-float64 array of length ndim and must return the natural
               logarithm of the objective function.

           mpiEnabled
               is a logical (boolean) indicator that, if ``True``, will
               cause the ParaDRAM simulation to run in parallel
               on the requested number of processors.
               The default value is ``False``.

       The above will generate a Parallel-ParaDRAM-simulation Python script in the current working
       directory of Python. Note the only difference between the serial and parallel simulation
       scripts: the extra line ``pmpd.mpiEnabled = True`` which tell the ParaMonte library to run
       the simulation in parallel.

       Assuming that you already have an MPI runtime library installed on your system (see below),
       you can now execute this Python script file ``main.py`` in parallel in two ways:

       1.  from inside ipython or jupyter, type the following,

           .. code-block:: bash

               !mpiexec -n 3 python main.py

       2.  outside of Python environment,
           from within a Bash shell (on Linux or Mac) or,
           from within an Anaconda command prompt on Windows,
           type the following,

           .. code-block:: bash

               mpiexec -n 3 python main.py

       **Note:**

       On Windows platform, if you are using the Intel MPI library,
       we recommend that you also specify the extra flag -localonly,

       .. code-block:: bash

           mpiexec -localonly -n 3 python main.py

       This will cause the simulations to run in parallel only on a single node,
       but more importantly, it will also prevent the use of Hydra service and
       the requirement for its registration. If you are not on a Windows cluster,
       (e.g., you are using your personal device), then we highly recommend
       specifying this flag.


       In all cases in the above, the script ``main.py`` will run on 3 processors.
       Feel free to change the number of processors to any number desired. But do
       not request more than the available number of physical cores on your system.

       **Tips on parallel usage**

       For up-to-date detailed instructions on how to run simulations in parallel visit:

           https://www.cdslab.org/paramonte

       You can also use the following commands on the Python command-line,

       .. code-block:: python
           :linenos:

           ##################################
           import paramonte as pm
           pm.verify() # verify the existence of parallel simulation prerequisites 
           ##################################

       to obtain specific information on how to run a parallel simulation,
       in particular, in relation to your current installation of ParaMonte.
       In general, for parallel simulations:

       0.  Ensure you need and will get a speedup by running the ParaDRAM sampler
           in parallel. Typically, if a single evaluation of the objective function
           takes much longer than a few milliseconds, your simulation may then
           benefit from the parallel run.

       1.  Ensure you have an MPI library installed, preferably, the Intel MPI
           runtime libraries. An MPI library should be automatically installed
           on your system with ParaMonte. If needed, you can download the Intel
           MPI library from their website and install it.

       2.  Ensure the ParaDRAM object property ``mpiEnabled`` is ``True``
           (the default is ``False``).

       3.  Before running the parallel simulation, in particular, on Windows systems,
           you may need to define the necessary MPI environmental variables on your system.
           To get information on how to define the variables, use the paramonte modules's
           function, ``verify()``, as described in the above.

       4.  Call your main Python code from a Python-aware mpiexec-aware command-line via,

           .. code-block:: bash

               mpi_launcher -n num_process python name_of_yor_python_code.py

           where,

           1.  "mpi_launcher" is the name of the MPI launcher
               of the MPI runtime library that you have installed.
               For example, the Intel MPI library's launcher is named mpiexec,
               also recognized by Microsoft, MPICH, and OpenMPI.
               Note that on supercomputers, the MPI launcher is usually
               something other than ``mpiexec``, for example:
               ``ibrun``, ``mpirun``, ...

           2.  "num_process" represents the number of cores
               on which you want to run the program. Replace this
               with the an integer number, like, 3 (meaning 3 cores).

               Do not assign more processes than the available number of
               physical cores on your device/cluster. Assigning more cores
               than physically available on your system will only slow down
               your simulation.

       Once the above script is saved in the file ``main.py``, open a Python-aware and
       MPI-aware command prompt to run the simulation in parallel via the MPI launcher,

       .. code-block:: bash

           mpiexec -n 3 python main.py

       This will execute the Python script main.py on three processes (images).
       Keep in mind that on Windows systems you may need to define MPI environmental
       variables before a parallel simulation, as descibed in the above.

       **ParaDRAM Class Attributes**

       See also:

           https://www.cdslab.org/paramonte/notes/usage/paradram/specifications/

       All input specifications (attributes) of a ParaDRAM simulation are optional.
       However, it is recomended that you provide as much information as possible
       about the specific ParaDRAM simulation and the objective function to be sampled
       via ParaDRAM simulation specifications.

       The ParaDRAM simulation specifications have lengthy comprehensive descriptions
       that appear in full in the output report file of every ParaDRAM simulation.

       The best way to learn about individual ParaDRAM simulation attributes
       is to a run a minimal serial simulation with the following Python script,

       .. code-block:: python
           :linenos:

           ##################################
           from paramonte import ParaDRAM
           pmpd = ParaDRAM()
           pmpd.outputFileName = "./test"
           def getLogFunc(point): return -sum(point**2)
           pmpd.runSampler( ndim = 1, getLogFunc = getLogFunc )
           ##################################

       Running this code will generate a set of simulation output files (in the current
       working directory of Python) that begin with the prefix ``test_process_1``. Among
       these, the file ``test_process_1_report.txt`` contains the full description of all
       input specifications of the ParaDRAM simulation as well as other information
       about the simulation results and statistics.

   ---------------------------------------------------------------------------

   .. method:: _getInputFile(self, inputFile)



   .. method:: runSampler(self, ndim: int, getLogFunc: tp.Callable[[tp.List[float]], float], buildMode: tp.Optional[str] = 'release', mpiEnabled: tp.Optional[bool] = None, inputFile: tp.Optional[str] = None)


      Run ParaDRAM sampler and return nothing.

      **Parameters**

          ndim
              integer representing the number of dimensions of the
              domain of the user's objective function ``getLogFunc(point)``.
              It must be a positive integer.

          getLogFunc(point)
              represents the user's objective function to be sampled,
              which must take a single input argument ``point`` of type
              numpy-float64 array of length ``ndim`` and must return the
              natural logarithm of the objective function.

          buildMode
              optional string argument with default value "release".
              possible choices are:

                  "debug"
                      to be used for identifying sources of bug
                      and causes of code crash.

                  "release"
                      to be used in all other normal scenarios
                      for maximum runtime efficiency.

          mpiEnabled
              optional logical (boolean) indicator which is None by default.
              If it is set to True, it will cause the ParaDRAM simulation
              to run in parallel on the requested number of processors.
              If it is not provided, its value will taken from the
              ``mpiEnabled`` property of the sampler object.
              See ParaDRAM class information on how
              to run a simulation in parallel.

          inputFile
              optional string input representing the path to
              an external input namelist of simulation specifications.

                  **Warning**

                  **Use this optional argument with caution and only if
                  you know what you are doing. Specifying this option
                  will cause paradram to ignore all other paradram
                  simulation specifications set by the user via
                  paradram instance attributes.**

      **Returns**

          None


   .. method:: _runSampler(self, ndim: int, getLogFuncRaw: tp.Callable[[int, tp.List[float]], float], buildMode: tp.Optional[str] = 'release', mpiEnabled: tp.Optional[bool] = False, inputFile: tp.Optional[str] = None)


      Run ParaDRAM sampler and return nothing. This method is identical to
      the ``runSampler()`` method, except that the input ``point`` parameter to
      the user-provided input objective function ``getLogFuncRaw(ndim,point)`` is
      a C-style raw pointer. This requires the user to guarantee that ``point`` will 
      be always used with array bounds in their implementation of the objective function. 
      The use of ``_runSampler()`` in place of ``runSampler()`` leads to a slight 
      performance gain in the simulations.

          **Example serial usage**

          Copy and paste the following code enclosed between the
          two comment lines in your python/ipython/jupyter session
          (make sure the indentations of the pasted lines comply with Python rules):

          .. code-block:: python
              :linenos:

              ##################################
              import paramonte as pm
              import numpy as np
              def getLogFuncRaw(ndim,point):
                  # return the log of the standard multivariate
                  # Normal density function with ndim dimensions
                  return -0.5 * np.sum( np.double( point[0:ndim] )**2 )
              pmpd = pm.ParaDRAM()
              pmpd._runSampler( ndim = 4                      # length of point
                              , getLogFuncRaw = getLogFuncRaw # the objective function
                              )
              ##################################

          where,

              ndim
                  represents the number of dimensions of the domain of
                  the user's objective function ``getLogFuncRaw(ndim, point)`` and,

              getLogFuncRaw(ndim, point)
                  represents the user's objective function to be sampled,
                  where,

                      ndim
                          is a 32-bit integer, representing the number of
                          dimensions of the domain of the user-provided
                          objective function.
                      point
                          is a C-style array-pointer of length ``ndim``
                          and type float64. Note that the bounds of
                          ``point`` must be always specified wherever
                          it is used within the objective function.

                  On output, it must return the natural logarithm of
                  the objective function.

          **Parameters**

              All input parameters have the same meaning as the parameters
              of ``runSampler()``. The only difference is in the input
              parameters to the objective function ``getLogFuncRaw``.

          **Returns**

              None


   .. method:: readChain(self, file: tp.Optional[str] = None, delimiter: tp.Optional[str] = None, parseContents: tp.Optional[bool] = True, renabled: tp.Optional[bool] = False)


      Return a list of the contents of a set of ParaDRAM output
      chain files whose names begin the user-provided input file.
      This method is to be only used for postprocessing of the output
      chain file(s) of an already finished ParaDRAM simulation.
      It is not meant to be called by all processes in parallel mode,
      although it is possible.

          **Parameters**

              file
                  A string representing the path to the chain file with
                  the default value of None.
                  The path only needs to uniquely identify the simulation
                  to which the chain file belongs. For example, specifying
                  "./mydir/mysim" as input will lead to a search for a file
                  that begins with "mysim" and ends with "_chain.txt"
                  inside the directory "./mydir/". If there are multiple
                  files with such name, then all of them will be read
                  and returned as a list.
                  If this input argument is not provided by the user, the
                  value of the object attribute outputFileName
                  will be used instead. At least one of the two mentioned
                  routes must provide the path to the chain file otherwise,
                  this method will break by calling ``sys.exit()``.

              delimiter
                  Optional input string representing the delimiter used in the
                  output chain file. If it is not provided as input argument,
                  the value of the corresponding object attribute outputDelimiter
                  will be used instead. If none of the two are available,
                  the default comma delimiter "," will be assumed and used.

              parseContents
                  If set to True, the contents of the file will be parsed and
                  stored in a component of the object named ``contents``.
                  The default value is ``True``.

              renabled
                  If set to False, the contents of the file(s) will be stored as a
                  list in a (new) component of the ParaDRAM object named ``chainList``
                  and ``None`` will be the return value of the method.
                  If set to True, the reverse will done.
                  The default value is ``False``.

          **Returns**

              a list of objects, each of which has the following properties:

                  file
                      full absolute path to the chain file.

                  delimiter
                      the delimiter used in the chain file.

                  ndim
                      number of dimensions of the domain of the objective function
                      from which the chain has been drawn.

                  count
                      the number of unique (weighted) points in the chain file.
                      This is essentially the number of rows in the chain file
                      minus one (representing the header line).

                  df
                      the contents of the chain file in the form of
                      a pandas-library DataFrame (hence called ``df``).

                  dynamic attributes:
                      corresponding to each column in the chain file, a property
                      with the same name as the column header is also created
                      for the object which contains the data stored in that column
                      of the chain file.

              If ``renabled = True``, the list of objects will be returned as the
              return value of the method. Otherwise, the list will be stored in a
              component of the ParaDRAM object named ``chainList``.


   .. method:: readMarkovChain(self, file: tp.Optional[str] = None, delimiter: tp.Optional[str] = None, parseContents: tp.Optional[bool] = True, renabled: tp.Optional[bool] = False)


      .. py:method:: readMarkovChain(self, file = None, delimiter = None, parseContents = True, renabled = False)

      Return a list of the unweighted (Markov-chain) contents of a set of
      ParaDRAM output chain files, whose names begin the user-provided
      input variable 'file'. This method is to be only used for postprocessing
      of the output chain file(s) of an already finished ParaDRAM simulation.
      It is not meant to be called by all processes in parallel mode,
      although it is possible.

          **Parameters**

              file
                  A string representing the path to the chain file with
                  the default value of None.
                  The path only needs to uniquely identify the simulation
                  to which the chain file belongs. For example, specifying
                  "./mydir/mysim" as input will lead to a search for a file
                  that begins with "mysim" and ends with "_chain.txt"
                  inside the directory "./mydir/". If there are multiple
                  files with such name, then all of them will be read
                  and returned as a list.
                  If this input argument is not provided by the user, the
                  value of the object attribute outputFileName
                  will be used instead. At least one of the two mentioned
                  routes must provide the path to the chain file otherwise,
                  this method will break by calling ``sys.exit()``.

              delimiter
                  Optional input string representing the delimiter used in the
                  output chain file. If it is not provided as input argument,
                  the value of the corresponding object attribute outputDelimiter
                  will be used instead. If none of the two are available,
                  the default comma delimiter "," will be assumed and used.

              parseContents
                  If set to True, the contents of the file will be parsed and
                  stored in a component of the object named ``contents``.
                  The default value is ``True``.

              renabled
                  If set to False, the contents of the file(s) will be stored as a
                  list in a (new) component of the ParaDRAM object named ``markovChainList``
                  and ``None`` will be the return value of the method.
                  If set to True, the reverse will done.
                  The default value is ``False``.

          **Returns**

              a list of objects, each of which has the following properties:

                  file
                      full absolute path to the chain file.

                  delimiter
                      the delimiter used in the chain file.

                  ndim
                      number of dimensions of the domain of the objective function
                      from which the chain has been drawn.

                  count
                      the number of unique (weighted) points in the chain file.
                      This is essentially the number of rows in the chain file
                      minus one (representing the header line).

                  df
                      the unweighted (Markovian) contents of the chain file in the
                      form of a pandas-library DataFrame (hence called ``df``).

                  dynamic attributes:
                      corresponding to each column in the chain file, a property
                      with the same name as the column header is also created
                      for the object which contains the data stored in that column
                      of the chain file.

              If ``renabled = True``, the list of objects will be returned as the
              return value of the method. Otherwise, the list will be stored in a
              component of the ParaDRAM object named ``markovChainList``.


   .. method:: readSample(self, file: tp.Optional[str] = None, delimiter: tp.Optional[str] = None, parseContents: tp.Optional[bool] = True, renabled: tp.Optional[bool] = False)


      Return a list of the contents of a set of ParaDRAM output
      sample files whose names contain the user-provided input file.
      This method is to be only used for postprocessing of the output
      sample file(s) of an already finished ParaDRAM simulation.
      It is not meant to be called by all processes in parallel mode,
      although it is possible.

          **Parameters**

              file
                  A string representing the path to the sample file with
                  the default value of None.
                  The path only needs to uniquely identify the simulation
                  to which the sample file belongs. For example, specifying
                  "./mydir/mysim" as input will lead to a search for a file
                  that begins with "mysim" and ends with "_sample.txt"
                  inside the directory "./mydir/". If there are multiple
                  files with such name, then all of them will be read
                  and returned as a list.
                  If this input argument is not provided by the user, the
                  value of the object attribute outputFileName
                  will be used instead. At least one of the two mentioned
                  routes must provide the path to the sample file otherwise,
                  this method will break by calling ``sys.exit()``.

              delimiter
                  Optional input string representing the delimiter used in the
                  output sample file. If it is not provided as input argument,
                  the value of the corresponding object attribute outputDelimiter
                  will be used instead. If none of the two are available,
                  the default comma delimiter "," will be assumed and used.

              parseContents
                  If set to True, the contents of the file will be parsed and
                  stored in a component of the object named ``contents``.
                  The default value is ``True``.

              renabled
                  If set to False, the contents of the file(s) will be stored as a
                  list in a (new) component of the ParaDRAM object named ``sampleList``
                  and ``None`` will be the return value of the method.
                  If set to True, the reverse will done.
                  The default value is ``False``.

          **Returns**

              a list of objects, each of which has the following properties:

                  file
                      full absolute path to the sample file.

                  delimiter
                      the delimiter used in the sample file.

                  ndim
                      number of dimensions of the domain of the objective function
                      from which the sample has been drawn.

                  count
                      number of sampled points in the sample file.

                  df
                      the contents of the sample file in the form of
                      a pandas-library DataFrame (hence called ``df``).

                  dynamic attributes:
                      corresponding to each column in the sample file, a property
                      with the same name as the column header is also created
                      for the object which contains the data stored in that column
                      of the sample file.

              If ``renabled = True``, the list of objects will be returned as the
              return value of the method. Otherwise, the list will be stored in a
              component of the ParaDRAM object named ``sampleList``.




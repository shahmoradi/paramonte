:mod:`paramonte._pmutils`
=========================

.. py:module:: paramonte._pmutils


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   paramonte._pmutils.Struct
   paramonte._pmutils.FrozenClass
   paramonte._pmutils.Timer
   paramonte._pmutils.Progress



Functions
~~~~~~~~~

.. autoapisummary::

   paramonte._pmutils.isNumericString
   paramonte._pmutils.getSize
   paramonte._pmutils.which
   paramonte._pmutils.getList
   paramonte._pmutils.delFile
   paramonte._pmutils.getFileList
   paramonte._pmutils.getRandomFilePrefix
   paramonte._pmutils.getLogIntSpace


.. py:class:: Struct


.. data:: newline
   

   

.. data:: creturn
   

   

.. py:class:: FrozenClass

   Bases: :class:`object`

   .. attribute:: __isfrozen
      :annotation: = False

      

   .. method:: __setattr__(self, key, value)


      Implement setattr(self, name, value).


   .. method:: _freeze(self)




.. function:: isNumericString(string)


.. function:: getSize(obj, seen=None)

   Recursively finds size of objects


.. function:: which(program)


.. function:: getList(x)

   Convert any input object to list.


.. function:: delFile(file, desc='the requested file', methodName='')


.. function:: getFileList(file, fileSuffix, methodName, reportEnabled=True)


.. py:class:: Timer

   .. method:: tic(self)



   .. method:: toc(self)




.. py:class:: Progress(msg=None, methodName='', reportEnabled=True, end='\n')

   .. method:: note(self, msg=None, end='\n', pre=False)



   .. method:: updateBar(self, fraction, progressFraction=0.05)



   .. method:: updateClock(self, fraction)




.. function:: getRandomFilePrefix(prefix='')


.. function:: getLogIntSpace(base, logskip, lowerLim, upperLim)

   return a set of unique integer spacings linearly-spaced in the 
   logarithmic scale in the input given base, between the input limits.



:mod:`paramonte._HeatMapPlot`
=============================

.. py:module:: paramonte._HeatMapPlot


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   paramonte._HeatMapPlot.HeatMapPlot



.. py:class:: HeatMapPlot(dataFrame: _tp.Optional[_pd.DataFrame] = None, columns: _tp.Optional[_tp.Union[str, range, _tp.List[int], _tp.List[str]]] = None, rows: _tp.Optional[_tp.Union[range, _tp.List[int]]] = None, set_kws: _tp.Optional[_tp.Dict] = (), figure_kws: _tp.Optional[_tp.Dict] = (), legend_kws: _tp.Optional[_tp.Dict] = (), heatmap_kws: _tp.Optional[_tp.Dict] = (), xticklabels_kws: _tp.Optional[_tp.Dict] = (), yticklabels_kws: _tp.Optional[_tp.Dict] = (), annotPrecision: _tp.Optional[int] = None, outputFile: _tp.Optional[str] = None)

   .. py:class:: HeatMapPlot

   This is the HeatMapPlot class for generating instances
   of histogram figures based on seaborn library's ``heatmap()``.

       **Usage**

           First generate an object of this class by optionally
           passing the following parameters described below. Then call
           the ``plot()`` method.

       **Parameters**

           dataFrame
               a numpy 2D-array or a pandas dataframe containing the data to plot.

           columns
               optional argument that determines the columns of dataframe to be visualized.
               It can have three forms:

                   1. a list of column indices in the input dataFrame.
                   2. a list of column names in dataFrame.columns.
                   3. a ``range(start,stop,step)``, representing the column indices in dataFrame.

               Examples:

                   1. ``columns = [0,1,4,3]``
                   2. ``columns = ["SampleLogFunc","SampleVariable1"]``
                   3. ``columns = range(17,7,-2)``

               If not provided, the default behavior includes all columns of the dataframe.

           rows
               optional argument that determines the rows of dataframe to be visualized.
               It can be either:
                   1. a ``range(start,stop,step)``, or,
                   2. a list of row indices in dataFrame.index.

               Examples:

                   1. ``rows = range(17,7,-2)``
                   2. ``rows = [i for i in range(7,17)]``

               If not provided, the default behavior includes all rows of the dataframe.

           set_kws
               optional dictionary of keyword arguments to be passed to seaborn's
               ``set()`` function. For example:

               .. code-block:: python

                   set_kws = {"style":"darkgrid"}

               if set to ``None``, then no call to ``set()`` function will be made.

           figure_kws
               optional dictionary of keyword arguments to be passed to matplotlib's
               ``figure()`` function. For example:

               .. code-block:: python

                   figure_kws = {"facecolor":"w","dpi":150}

           legend_kws
               optional dictionary of keyword arguments to be passed to matplotlib's
               ``legend()`` function. If it is not provided, the legend will be added
               to the plot. If it is set to ``{}``, then the legend will be added
               to the plot and automatically adjusted. For example:

               .. code-block:: python

                   legend_kws = {"labels":["Variable1","Variable2"]}

           heatmap_kws
               optional dictionary of keyword arguments to be passed to seaborn's
               ``heatmap()`` function. For example:

               .. code-block:: python

                   heatmap_kws = {"square": True}

           xticklabels_kws
               optional dictionary of keyword arguments to be passed to matplotlib's
               ``set_xticklabels()`` method of the Axes object of the plot. For example:

               .. code-block:: python

                   xticklabels_kws = {"verticalalignment": "baseline"}

           yticklabels_kws
               optional dictionary of keyword arguments to be passed to matplotlib's
               ``set_yticklabels()`` method of the Axes object of the plot. For example:

               .. code-block:: python

                   yticklabels_kws = {"verticalalignment": "baseline"}

           annotPrecision
               optional integer which determines the precision of the output numbers
               when heatmap annotation is requested via ``'annot'`` key in heatmap_kws.

           outputFile
               optional string representing the name of the output file in which
               the figure will be saved. If not provided, no output file will be generated.
               and the corresponding attribute of object will be ``None``.

       **Attributes**

           All of the parameters described above, except dataFrame.
               a reference to the dataFrame will be implicitly stored in the object.

           currentFig
               an object of class ParaMonteFigure which is initially None, but upon
               making a plot, is populated with attributes representing all outputs
               from matplotlib/seaborn function calls, with the following attributes:

                   figure
                       the output of matplotlib's ``figure()`` function.

                   axes
                       the output of seaborns's ``heatmap()`` function.

       **Returns**

           self
               an object of class ``HeatMapPlot``.

   ---------------------------------------------------------------------------

   .. method:: __call__(self, reself: _tp.Optional[bool] = False, **kwargs)


      .. py:method:: __call__(self, reself = False, **kwargs)

      calls the ``plot()`` method of the current instance of the class.

          **Parameters**

              reself
                  logical variable. If True, an instance of the object
                  will be returned upon exit to the calling routine.
                  The default value is ``False``.
              also, any attributes of the current instance of the class.

          **Returns**

              the object self if ``reself = True`` otherwise, None.
              However, this method causes side-effects by manipulating
              the existing attributes of the object.


   .. method:: plot(self)


      .. py:method:: plot(self)

      Generate a heatmap of the requested columns from the selected columns of
      object's dataframe.

          **Parameters**

              None

          **Returns**

              None. However, this method causes side-effects by manipulating
              the existing attributes of the object.




:mod:`paramonte._visutils`
==========================

.. py:module:: paramonte._visutils


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   paramonte._visutils.ParaMonteFigure
   paramonte._visutils.Target



Functions
~~~~~~~~~

.. autoapisummary::

   paramonte._visutils.isColorBar
   paramonte._visutils.isPresentColorBar


.. function:: isColorBar(ax)

   .. py:function:: isColorBar(ax)

   Attempts to guess whether an input matplotlib ``Axes`` is
   home to a ``colorbar`` object.

       **Parameters**

           ax
               Axes instance

       **Returns**

           a boolean value of ``True`` if the x xor y axis
           satisfies all of the following and thus looks
           like a ``colorbar`` object:
               No ticks, no tick labels, no axis label


.. function:: isPresentColorBar()


.. py:class:: ParaMonteFigure

   .. py:class:: ParaMonteFigure

   An empty class representing a simple structure
   to contain ParaMonte graphics components.

       **Parameters**

           None

       **Returns**

           None


.. py:class:: Target(value: _tp.Optional[_tp.Union[_tp.List[int], _tp.List[float]]] = None, axes=None, axhline_kws: _tp.Optional[_tp.Dict] = (), axvline_kws: _tp.Optional[_tp.Dict] = (), scatter_kws: _tp.Optional[_tp.Dict] = (), outputFile: _tp.Optional[str] = None)

   .. py:class:: Target

   This is the Target class for generating instances
   of a target on the current active figure and axis.

       **Usage**

       first generate an object of this class by optionally
       passing the following parameters described below. Then call
       the ``plot()`` method. The generated object is also callable 
       with the same input parameters as the object's constructor.

       **Parameters**

           value
               a pair (list, array, or tuple) of floats, 
               representing the (x,y) coordinates of the target.

           axes
               the axes object to which the target must be added.
               The default is None in which case the output of matplotlib's ``gca()``
               function will be used to get the current active axes.

           axhline_kws
               optional dictionary of keyword arguments to be passed to matplotlib's
               ``axhline()`` function. For example:

               .. code-block:: python

                   axhline = { "linewidth": 0.5,
                               "color": "orangered",
                               "linestyle": ":",
                               "xmin": 0.1
                               "xmax": 1.9
                               }

               The default is ``{}``, which will be appropriately populated.
               If set to None, no horizontal target line will be added.

           axvline_kws
               optional dictionary of keyword arguments to be passed to matplotlib's
               ``axvline()`` function. For example:

               .. code-block:: python

                   axvline = { "linewidth": 0.5,
                               "color": "orangered",
                               "linestyle": ":",
                               "ymin": 0.1
                               "ymax": 1.9
                               }

               The default is ``{}``, which will be appropriately populated.
               If set to ``None``, no vertical target line will be added.

           scatter_kws
               optional dictionary of keyword arguments to be passed to matplotlib's
               ``scatter()`` function. For example:

               .. code-block:: python

                   scatter_kws = {"s":10,"color":"green"}

               The default is ``{}``.
               If set to ``None``, no target point will be plotted.

           outputFile
               optional string representing the name of the output file 
               in which the figure will be saved. If not provided, 
               no output file will be generated.

       **Attributes**

           All of the parameters described above, except axes.
               The input axes object (whether provided by the user or fetched by the class)
               will be stored as a component of the object's attribute ``currentFig``.

           currentFig
               an object of class ParaMonteFigure which is initially ``None``, but upon
               making a plot, is populated with attributes representing all outputs
               from matplotlib/seaborn function calls, with the following attributes:

                   axes
                       the output of matplotlib's ``gca()`` function or,
                       the input axes object by the user.

                   axhline
                       the output of matplotlib's ``axhline()`` function.

                   axvline
                       the output of matplotlib's ``axvline()`` function.

                   scatter
                       the output of matplotlib's ``scatter()`` function.

       **Returns**

           self
               an object of class ``Target``.

   ---------------------------------------------------------------------------

   .. method:: __call__(self, **kwargs)


      .. py:method:: __call__(self, reself = False, **kwargs)

      Calls the ``plot()`` method of the current instance of the class.

          **Parameters**

              reself
                  logical variable. If ``True``, an instance of the object
                  will be returned upon exit to the calling routine.
                  The default value is ``False``.

              also, 
                  any attributes of the current instance of the class.

          **Returns**

              the object self if ``reself = True`` otherwise, ``None``.
              However, this method causes side-effects by manipulating
              the existing attributes of the object.


   .. method:: plot(self)


      .. py:method:: plot(self)

      Add a target on an existing plot (the current active axes object)
      based on the ``value`` attribute of the target object.

          **Parameters**

              None

          **Returns**

              None. However, this method causes side-effects by 
              manipulating the existing attributes of the object.




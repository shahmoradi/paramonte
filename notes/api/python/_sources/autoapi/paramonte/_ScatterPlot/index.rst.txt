:mod:`paramonte._ScatterPlot`
=============================

.. py:module:: paramonte._ScatterPlot


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   paramonte._ScatterPlot.ScatterPlot



.. py:class:: ScatterPlot(dataFrame: _tp.Optional[_pd.DataFrame] = None, xcolumns: _tp.Optional[_tp.Union[str, range, _tp.List[int], _tp.List[str]]] = None, ycolumns: _tp.Optional[_tp.Union[str, range, _tp.List[int], _tp.List[str]]] = None, ccolumns: _tp.Optional[_tp.Union[str, range, _tp.List[int], _tp.List[str]]] = (), rows: _tp.Optional[_tp.Union[range, _tp.List[int]]] = None, set_kws: _tp.Optional[_tp.Dict] = (), figure_kws: _tp.Optional[_tp.Dict] = (), legend_kws: _tp.Optional[_tp.Dict] = (), scatter_kws: _tp.Optional[_tp.Dict] = (), colorbar_kws: _tp.Optional[_tp.Dict] = (), outputFile: _tp.Optional[str] = None)

   .. py:class:: ScatterPlot

   This is the ScatterPlot class for generating instances 
   of scatter figures based on matplotlib library's 
   ``scatter()`` functions.

       **Usage**

           First generate an object of this class by optionally 
           passing the following parameters described below. Then call 
           the plot() method. The generated object is also callable with 
           the same input parameters as the object's constructor.

       **Parameters**

           dataFrame
               a Pandas dataframe from which the selected data will be plotted.

           xcolumns
               optional argument that determines the columns of dataframe to serve as 
               the x-values. It can have three forms:

                   1.  a list of column indices in the input dataFrame.
                   2.  a list of column names in dataFrame.columns.
                   3.  a ``range(start,stop,step)``, representing the column indices 
                       in the input dataFrame.

               Examples:

                   1.  ``xcolumns = [0,1,4,3]``
                   2.  ``xcolumns = ["SampleLogFunc","SampleVariable1"]``
                   3.  ``xcolumns = range(17,7,-2)``

               However, in all cases, it must have a length that is either 1 or equal 
               to the length of ycolumns. If the length is 1, then ``xcolumns`` will be 
               plotted against data corresponding to each element of ``ycolumns``.
               If not provided, the default will be the count of the rows of the 
               input dataFrame.

           ycolumns
               optional argument that determines the columns of dataframe to serve 
               as the y-values. It can have three forms:

                   1.  a list of column indices in the input dataFrame.
                   2.  a list of column names in dataFrame.columns.
                   3.  a ``range(start,stop,step)``, representing the column indices 
                       in the input dataFrame.

               Examples:

                   1.  ``ycolumns = [0,1,4,3]``
                   2.  ``ycolumns = ["SampleLogFunc","SampleVariable1"]``
                   3.  ``ycolumns = range(17,7,-2)``

               However, in all cases, it must have a length that is either 1 or 
               equal to the length of xcolumns. If the length is 1, then ``ycolumns`` 
               will be plotted against data corresponding to each element of xcolumns. 
               If not provided, the default includes all columns of the dataframe. 

           ccolumns
               (scatter-color-columns) optional argument that determines the 
               columns of dataframe to serve as the color-values corresponding to 
               each point in the plot. It can have three forms:

                   1.  a list of column indices in the input dataFrame.
                   2.  a list of column names in dataFrame.columns.
                   3.  a ``range(start,stop,step)``, representing the column indices 
                       in the input dataFrame.

               Examples:

                   1.  ``ccolumns = [0,1,4,3]``
                   2.  ``ccolumns = ["SampleLogFunc","SampleVariable1"]``
                   3.  ``ccolumns = range(17,7,-2)``

               However, in all cases, it must have a length that is either 
               1 or equal to the lengths of xcolumns or ycolumns, whichever is not 1. 
               If the length is 1, then the same color will be used for plotting data 
               corresponding to each element of xcolumns. If not provided, the default 
               will be the count of the rows of the input dataFrame. If set to None, 
               fixed-color scatterplots will be added to the plot.

           rows
               optional argument that determines the rows of dataframe 
               to be visualized. It can be either:

                   1.  a ``range(start,stop,step)``, or, 
                   2.  a list of row indices in dataFrame.index.

               Examples:

                   1.  ``rows = range(17,7,-2)``
                   2.  ``rows = [i for i in range(7,17)]``

               If not provided, the default includes all rows of the dataframe.

           set_kws
               optional dictionary of keyword arguments to be passed to seaborn's 
               ``set()`` function. For example: 

               .. code-block:: python

                   set_kws = {"style": "darkgrid"}

               If set to ``None``, then no call to ``set()`` function will be made.

           figure_kws
               optional dictionary of keyword arguments to be passed to matplotlib's 
               ``figure()`` function. For example: 

               .. code-block:: python

                   figure_kws = {"facecolor":"w","dpi":150}

           legend_kws
               optional dictionary of keyword arguments to be passed to matplotlib's 
               ``legend()`` function. If it is set to None, no legend will be added
               to the plot. If it is set to ``{}``, then the legend will be added 
               to the plot and automatically adjusted. For example: 

               .. code-block:: python

                   legend_kws = {"labels":["Variable1","Variable2"]}

               legend will be added to plot only if simple scatter plot with no 
               color-mappings are requested.

           scatter_kws
               optional dictionary of keyword arguments to be passed to matplotlib's 
               ``scatter()`` function. For example: 

               .. code-block:: python

                   scatter_kws = {"zorder":2}

               The default is ``{}``.
               If set to ``None``, no scatter-plots will be plotted.

           colorbar_kws
               optional dictionary of keyword arguments to be passed to matplotlib's 
               ``figure.colorbar()`` function. For example: 

               .. code-block:: python

                   colorbar_kws = {"orientation":"vertical"}

               The default is ``{}``. If set to None, no colorbar will be plotted.

           outputFile
               optional string representing the name of the output file in which 
               the figure will be saved. If not provided, no output file will be generated.

       **Attributes**

           All of the parameters described above, except dataFrame.
               a reference to the dataFrame will be implicitly stored in the object.

           target
               a callable object of ParaMonte library's class Target which can 
               be used to add target point and lines to the current active plot.

           currentFig
               an object of class ParaMonteFigure which is initially None, but upon 
               making a plot, is populated with attributes representing all outputs 
               from matplotlib/seaborn function calls, with the following attributes:

                   figure
                       the output of matplotlib's ``figure()`` function.

                   axes
                       the output of matplotlib's ``subplot()`` function.

                   scatter
                       an object of type PathCollection which is the 
                       output of matplotlib's ``scatter()`` function.

                   legend
                       the output of matplotlib's ``legend()`` function.

                   colorbar
                       the output of matplotlib's ``Figure.colorbar()`` function.

       **Returns**

           self
               an object of ``ScatterPlot``.

   ---------------------------------------------------------------------------

   .. method:: __call__(self, reself: _tp.Optional[bool] = False, **kwargs)


      .. py:method:: __call__(self, reself = False, **kwargs)

      Calls the ``plot()`` method of the current instance of the class.

          **Parameters**

              reself
                  logical variable. If True, an instance of the object 
                  will be returned upon exit to the calling routine.
                  The default value is ``False``.

              also, 
                  any attributes of the current instance of the class.

          **Returns**

              the object self if ``reself = True`` otherwise, None.
              However, this method causes side-effects by manipulating 
              the existing attributes of the object.


   .. method:: plot(self)


      .. py:method:: plot(self)

      Generate a scatter plot from the selected columns of the object's dataframe.

          **Parameters**

              None

          **Returns**

              None. However, this method causes side-effects by manipulating
              the existing attributes of the object.




:mod:`paramonte.vis.LineScatterPlot`
====================================

.. py:module:: paramonte.vis.LineScatterPlot


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   paramonte.vis.LineScatterPlot.LineScatterPlot



.. data:: Struct
   

   

.. data:: newline
   

   

.. py:class:: LineScatterPlot(plotType, dataFrame=None, methodName='ParaMonte', reportEnabled=True, resetPlot=None)

   Bases: :class:`paramonte.vis._BasePlot.BasePlot`

   This is the LineScatterPlot class for generating instances
   of line or scatter plots or the combination of the two in
   two or three dimensions based on the visualization tools
   of the ``matplotlib`` and ``seaborn`` Python libraries.

       **Usage**

           First generate an object of this class by optionally
           passing the following parameters described below. Then call
           the ``make()`` method. The generated object is also callable 
           with the same input parameters as the object's constructor.

       **Parameters**

           plotType

               A string indicating the name of the plot to be constructed.

           dataFrame (optional)

               A pandas dataFrame whose data will be plotted.

           methodName (optional)

               The name of the ParaMonte sample requesting the BasePlot.

           reportEnabled (optional)

               A boolean whose value indicates whether guidelines should be 
               printed in the standard output.

           resetPlot (optional)

               A function that resets the properties of the plot as desired 
               from outside. If provided, a pointer to this function will be
               saved for future internal usage.

       **Attributes**

           xcolumns

               An attribute that determines the columns of dataFrame 
               to be visualized as the X-axis. It can have three forms:

                   1.  A list of column indices in dataFrame.
                   2.  A list of column names in dataFrame.columns.
                   3.  A ``range(start,stop,step)`` of column indices.

               Examples:

                   1.  ``xcolumns = [0,1,4,3]``
                   2.  ``xcolumns = ["SampleLogFunc","SampleVariable1"]``
                   3.  ``xcolumns = range(17,7,-2)``

               The default behavior includes all columns of the dataFrame.

           ycolumns

               An attribute that determines the columns of dataFrame 
               to be visualized as the Y-axis. It can have three forms:

                   1.  A list of column indices in dataFrame.
                   2.  A list of column names in dataFrame.columns.
                   3.  A ``range(start,stop,step)`` of column indices.

               Examples:

                   1.  ``ycolumns = [0,1,4,3]``
                   2.  ``ycolumns = ["SampleLogFunc","SampleVariable1"]``
                   3.  ``ycolumns = range(17,7,-2)``

               The default behavior includes all columns of the dataFrame.

           zcolumns (exists only in 3D plot objects)

               An attribute that determines the columns of dataFrame 
               to be visualized as the Z-axis. It can have three forms:

                   1.  A list of column indices in dataFrame.
                   2.  A list of column names in dataFrame.columns.
                   3.  A ``range(start,stop,step)`` of column indices.

               Examples:

                   1.  ``zcolumns = [0,1,4,3]``
                   2.  ``zcolumns = ["SampleLogFunc","SampleVariable1"]``
                   3.  ``zcolumns = range(17,7,-2)``

               The default behavior includes all columns of the dataFrame.

           ccolumns

               An attribute that determines the columns of dataFrame 
               to be used for color mapping. It can have three forms:

                   1.  A list of column indices in dataFrame.
                   2.  A list of column names in dataFrame.columns.
                   3.  A ``range(start,stop,step)`` of column indices.

               Examples:

                   1.  ``ccolumns = [0,1,4,3]``
                   2.  ``ccolumns = ["SampleLogFunc","SampleVariable1"]``
                   3.  ``ccolumns = range(17,7,-2)``

               If ``ccolumns`` is set to ``None``, then no color-mapping 
               will be made. If it is set to an empty list ``[]``, then 
               the values from the ``rows`` attribute will be used for 
               color-mapping.

           rows

               An attribute that determines the rows of dataFrame to be 
               visualized. It can be either:

                   1.  A ``range(start,stop,step)``, or, 
                   2.  A list of row indices in dataFrame.index.

               Examples:

                   1.  ``rows = range(17,7,-2)``
                   2.  ``rows = [i for i in range(7,17)]``

               The default behavior includes all rows of the dataFrame.

           plot (exists only for line or lineScatter plots in 2D and 3D)

               A structure with two attributes:

                   enabled

                       A boolean indicating whether a call to the ``plot()``
                       function of the matplotlib library should be made 
                       or not.

                   kws

                       A structure whose components are directly passed as 
                       keyword arguments to the ``plot()`` function.

                       Example usage:

                           .. code-block:: python

                               plot.enabled = True
                               plot.kws.linewidth = 1

                       **NOTE**

                       If a desired property is missing among the ``kws`` 
                       attributes, simply add the field and its value to 
                       the component.

           scatter (exists only for scatter / lineScatter plots in 2D and 3D)

               A structure with two attributes:

                   enabled

                       A boolean indicating whether a call to the 
                       ``scatter()`` function of the matplotlib library 
                       should be made or not.

                   kws

                       A structure whose components are directly passed as 
                       keyword arguments to the ``scatter()`` function.

                       Example usage:

                           .. code-block:: python

                               scatter.enabled = True
                               scatter.kws.s = 2

                       **NOTE**

                       If a desired property is missing among the ``kws`` 
                       attributes, simply add the field and its value to 
                       the component.

           lineCollection (exists only for 2D / 3D line / lineScatter plots)

               A structure with two attributes:

                   enabled

                       A boolean indicating whether a call to the 
                       ``LineCollection()`` class of the matplotlib 
                       library should be made or not. This will result 
                       in line plots that are color-mapped.

                   kws

                       A structure whose components are directly passed as 
                       keyword arguments to the ``LineCollection()`` class 
                       of matplotlib library.

                       Example usage:

                           .. code-block:: python

                               lineCollection.enabled = True
                               lineCollection.kws.linewidth = 1

                       **NOTE**

                       If a desired property is missing among the ``kws`` 
                       attributes, simply add the field and its value to 
                       the component.

           set

               A structure with two attributes:

                   enabled

                       A boolean indicating whether a call to the ``set()``
                       function of the seaborn library should be made or not.

                   kws

                       A structure whose components are directly passed as 
                       keyword arguments to the ``set()`` function.

                       Example usage:

                           .. code-block:: python

                               set.kws.style = "darkgrid"

                       **NOTE**

                       If a desired property is missing among the ``kws`` 
                       attributes, simply add the field and its value to 
                       the component.

           axes (available only in 1D and 2D plots)

               A structure with one attribute:

                   kws

                       A structure whose components are directly passed as 
                       keyword arguments to the ``gca()`` function of the 
                       matplotlib library.

                       Example usage:

                           .. code-block:: python

                               axes.kws.facecolor = "w"

                       **NOTE**

                       If a desired property is missing among the ``kws`` 
                       attributes, simply add the field and its value to 
                       the component.

           axes3d (available only in 3D plots)

               A structure with one attribute:

                   kws

                       A structure whose components are directly passed as 
                       keyword arguments to the ``Axes3D()`` function of the 
                       matplotlib library.

                       Example usage:

                           .. code-block:: python

                               axes3d.kws.facecolor = "w"

                       **NOTE**

                       If a desired property is missing among the ``kws`` 
                       attributes, simply add the field and its value to 
                       the component.

           figure

               A structure with two attributes:

                   enabled

                       A boolean indicating whether a call to the ``figure()``
                       function of the matplotlib library should be made or not.
                       If a call is made, a new figure will be generated.
                       Otherwise, the current active figure will be used.

                   kws

                       A structure whose components are directly passed as 
                       keyword arguments to the ``figure()`` function.

                       Example usage:

                           .. code-block:: python

                               figure.kws.facecolor = "w"

                       **NOTE**

                       If a desired property is missing among the ``kws`` 
                       attributes, simply add the field and its value to 
                       the component.

           colorbar (exists only for plots that require colorbar)

               A structure with two attributes:

                   enabled

                       A boolean indicating whether a call to the ``colorbar()``
                       function of the matplotlib library should be made or not.
                       If a call is made, a new figure will be generated.
                       Otherwise, the current active figure will be used.

                   kws

                       A structure whose components are directly passed as 
                       keyword arguments to the ``colorbar()`` function of 
                       the matplotlib library.

                       **NOTE**

                       If a desired property is missing among the ``kws`` 
                       attributes, simply add the field and its value to 
                       the component.

               A colorbar will be added to a plot only if a color-mappings 
               is requested in the plot.

           legend (may not exist for some types of plots)

               A structure with two attributes:

                   enabled

                       A boolean indicating whether a call to the ``legend()``
                       function of the matplotlib library should be made or not.
                       If a call is made, a new figure will be generated.
                       Otherwise, the current active figure will be used.

                   kws

                       A structure whose components are directly passed as 
                       keyword arguments to the ``legend()`` function.

                       Example usage:

                       .. code-block:: python

                           legend.kws.labels = ["Variable1", "Variable2"]

                       **NOTE**

                       If a desired property is missing among the ``kws`` 
                       attributes, simply add the field and its value to 
                       the component.

               A legend will be added to a plot only if no color-mappings are
               requested in the plot.

           currentFig

               A structure whose attributes are the outputs of various plotting 
               tools used to make the current figure. These include the handle 
               to the current figure, the handle to the current axes in the plot, 
               the handle to the colorbar (if any exists), and other Python 
               plotting tools used to make to generate the figure.

           target (available only in 1D and 2D plot objects)

               A callable object of the ParaMonte library's ``Target`` class 
               which can be used to add target point or lines to the current 
               active plot.

       **Returns**

               An object of class ``LineScatterPlot``.

   ---------------------------------------------------------------------------

   .. method:: _reset(self)



   .. method:: __call__(self, reself: tp.Optional[bool] = False, **kwargs)


      Call the ``make()`` method of the current 
      instance of the class.

          **Parameters**

              Any arguments that can be passed to the 
              ``make()`` method of the plot object.

          **Returns**

              Any return value from the ``make()`` 
              method of the plot object.


   .. method:: make(self, reself: tp.Optional[bool] = False, **kwargs)


      Generate a line/scatter plot from the 
      selected columns of the object's dataframe.

          **Parameters**

              reself

                  A logical variable. If ``True``, an instance of 
                  the object will be returned to the calling routine 
                  upon exit. The default value is ``False``.

          **Returns**

              The object self if ``reself = True`` otherwise, ``None``.
              However, this method causes side-effects by manipulating
              the existing attributes of the object.


   .. method:: _getDocString(self)



   .. method:: helpme(self, topic=None)


      Print the documentation for the input string topic. 
      If the topic does not exist, the documentation for
      the object will be printed.

          **Parameters**
       
              topic (optional)

              A string containing the name of the object 
              for which help is needed.

          **Returns**
       
              None
       
          **Example**

              .. code-block:: python
                  :linenos:

                  helpme()
                  helpme("make")
                  helpme("helpme")
                  helpme("getLogLinSpace")



